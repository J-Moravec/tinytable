---
title: "`tinytable` tutorial"
format:
  html: default
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
---

TODO: Link to PDF at top

```{r, include=FALSE}
options("tt_latexOptions_placement" = "H")
```

`tinytable` is easy to use:

```{r}
# library(tinytable)
pkgload::load_all()

x <- mtcars[1:4, 1:5]

tinytable(x)
```


# Output formats

`tinytable` can produce tables in HTML, Markdown, or LaTeX (PDF) format. To choose, we use the `output` argument:

```{r}
#| eval: false
tinytable(x, output = "html")
tinytable(x, output = "latex")
tinytable(x, output = "markdown")
```

When calling `tinytable` from a Quarto or Rmarkdown document, `tinytable` detects the output format automatically and generates an HTML or LaTeX table as appropriate. This means that we do not need to explicitly specify the `output` format.


# Style


The `style()` function allows us to apply visual styles to our table. This includes customizing features such as:

* Text color
* Background color
* Widths
* Heights
* Alignment
* Text Wrapping
* Column and Row Spacing
* Cell Merging
* Multi-row or column spans
* Border Styling
* Font Styling
* Header Customization

The main arguments of the `style()` function are rather self-explanatory:

* `i` row numbers: integer vector or `NULL` to style all rows.
* `j` column numbers: integer vector or `NULL` to style all columns.
* `color`: text color
* `background`: background color
* `bold`: bold text
* `italic`: bold text
* `align`: horizontal alignment

In addition, `style()` accepts two more arguments which allow unlimited possibilities for customizing every possible aspect of your tables in HTML or LaTeX (PDF):

* `latex = latexOptions()` for tabularray
* `html = htmlOptions()` for Bootstrap

We discuss these extra arguments near the end of this page.


## Cells

To style individual cells, we use the `style_cell()`  function. The first two arguments (`i` and `j`) identify the positions of the cells of interest, by row and column numbers respectively. To style a cell in the 2nd row and 3rd column, we can do:

```{r}
tinytable(x) |>
  style(
    i = 2,
    j = 3,
    background = "black",
    color = "white",
    bold = TRUE,
    italic = TRUE)
```

The `i` and `j` accept vectors of integers to modify several cells at once:

```{r}
tinytable(x) |> style(2, c(1, 3), background = "olive")
```

We can style all cells in a table by omitting the `i` and `j` arguments:


```{r}
tinytable(x) |> style(background = "black", color = "white", bold = TRUE)
```

## Rows and columns

We can style entire rows by omitting the `j` argument, or style entire columns by omitting the `i` argument:

```{r}
tinytable(x) |> style(i = 1:2, color = "blue")
```

```{r}
tinytable(x) |> style(j = c(2, 4), bold = TRUE)
```

# Headers

The header can be omitted from the table by deleting the column names in the `x` data frame:

```{r}
k <- x
colnames(k) <- NULL
tinytable(k)
```


# Captions and cross-references

```{r}
tinytable(x, caption = "Data about cars.")
```

TODO: Cross-references


# HTML customization

_Warning:_ The `html` argument is only used for HTML tables, and it is ignored when `tinytable` creates LaTeX tables for PDF files. You can skip this section if you are reading the PDF version of this tutorial.

```{r}
tinytable(x, html = htmlOptions(class = "table table-dark"))
```


# LaTeX customization

_Warning:_ The `latex` argument is only used for LaTeX/PDF tables, and it is ignored when `tinytable` creates HTML tables for the web. You can skip this section if you are reading the HTML version of this tutorial.

```{r}
tinytable(x, latex = latexOptions(theme = "void", hlines = ""))
```

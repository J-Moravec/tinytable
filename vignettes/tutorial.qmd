---
title: "`tinytable`"
format:
  html: default
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
---

```{r, include = FALSE}
options("tt_tabularray_placement" = "H")
```


\clearpage

`tinytable` is a small but powerful `R` package to draw HTML, LaTeX, PDF, Markdown, and Typst tables. The interface is minimalist, but it gives users direct and convenient access to powerful frameworks to create endlessly customizable tables.

This tutorial introduces the main functions of the package. It is available in two versions:

* [PDF](tutorial.pdf)
* [HTML](tutorial.html)


# Tiny Tables

```{r}
library(tinytable)

x <- mtcars[1:4, 1:5]

tt(x)
```

```{r, include=FALSE}
# after library to override and build with dev version
pkgload::load_all()
```

## Output formats

`tinytable` can produce tables in HTML, Markdown, or LaTeX (PDF) format. To choose, we use the `output` argument:

```{r}
#| eval: false
tt(x, output = "html")
tt(x, output = "latex")
tt(x, output = "markdown")
```

When calling `tinytable` from a Quarto or Rmarkdown document, `tinytable` detects the output format automatically and generates an HTML or LaTeX table as appropriate. This means that we do not need to explicitly specify the `output` format.

## Themes

`tinytable` offers a few basic themes out of the box: "default", "striped", "grid", "void." Those themes can be applied with the `theme` argument of the `tt()` function. As we will see below, it is easy to go much beyond those basic settings to customize your own tables. Here we only illustrate a few of the simplest settings:

```{r}
tt(x, theme = "striped")
```

```{r}
tt(x, theme = "grid")
```

::: {.content-visible when-format="pdf"}
```{r}
tt(x, theme = "void")
```
:::

## Alignment

To align columns, we use a single string, where each letter represents a column:

```{r}
tt(x, align = "ccrrl")
```

## Width

The `width` arguments accepts a number between 0 and 1, indicating what proportion of the linewidth the table should cover:

```{r}
tt(x, width = 0.5)
```

```{r}
tt(x, width = 1)
```

## Line breaks and text wrapping

When the `width` argument is specified and a cell includes long text, the text is automatically wrapped to match the table.

```{r}
d <- data.frame(
  a = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae",
  b = "dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos"
)
tt(d, width = 3/4)
```

Manual line breaks work sligthly different in LaTeX (PDF) or HTML. This table shows the two strategies. For HTML, we insert a `<br>` tag. For LaTeX, we wrap the string in curly braces `{}`, and then insert two (escaped) backslashes: `\\\\`

```{r}
d <- data.frame(
  "{Sed ut \\\\ perspiciatis unde}",
  "dicta sunt<br> explicabo. Nemo"
) |> setNames(c("LaTeX line break", "HTML line break"))
tt(d, width = 1)
```


## Captions and cross-references

```{r}
tt(x, caption = "Data about cars.")
```

TODO: Cross-references


# Style

The main styling function for the `tinytable` package is `style_tt()`. Via this function, you can access three main interfaces to customize tables:

1. A general interface to frequently used style choices which works for both HTML and LaTeX (PDF): colors, font style and size, row and column spans, etc. This is accessed through several distinct arguments in the `style_tt()`  function, such as `italic`, `color`, etc.
2. A specialized interface which allows users to use the [powerful `tabularray` package](https://ctan.org/pkg/tabularray?lang=en) to customize LaTeX tables. This is accessed by passing `tabularray` settings as strings to the `tabularray_inner` and `tabularray_outer` arguments of `style_tt()`.
3. A specialized interface which allows users to use the [powerful `Bootstrap` framework](https://getbootstrap.com/docs/5.3/content/tables/) to customize HTML tables. This is accessed by passing CSS declarations and rules to the `bootstrap_css` and `bootstrap_css_rule` arguments of `style_tt()`.

## Colors, lines, space, font, spans, etc.

These functions can be used to customize rows, columns, or individual cells. They control many features, including:

* Text color
* Background color
* Widths
* Heights
* Alignment
* Text Wrapping
* Column and Row Spacing
* Cell Merging
* Multi-row or column spans
* Border Styling
* Font Styling
* Header Customization

The `style_*()` functions can modify individual cells, or entire columns and rows. The portion of the table that is styled is determined by the `i` (rows)  and `j` (columns) arguments.


## Cells, rows, columns

To style individual cells, we use the `style_cell()`  function. The first two arguments---`i` and `j`---identify the cells of interest, by row and column numbers respectively. To style a cell in the 2nd row and 3rd column, we can do:

```{r}
tt(x) |>
  style_tt(
    i = 2,
    j = 3,
    background = "black",
    color = "white")
```

The `i` and `j` accept vectors of integers to modify several cells at once:

```{r}
tt(x) |>
  style_tt(
    i = 2:3,
    j = c(1, 3, 4),
    italic = TRUE,
    color = "red")
```

We can style all cells in a table by omitting both the `i` and `j` arguments:


```{r}
tt(x) |> style_tt(color = "blue")
```

We can style entire rows by omitting the `j` argument:

```{r}
tt(x) |> style_tt(i = 1:2, color = "blue")
```

We can style entire columns by omitting the `i` argument:

```{r}
tt(x) |> style_tt(j = c(2, 4), bold = TRUE)

```
Of course, we can also call the `style_tt()` function several times to apply different styles to different parts of the table:

```{r}
tt(x) |> 
  style_tt(i = 1, j = 1:2, color = "orange") |>
  style_tt(i = 1, j = 3:4, color = "green")
```

## Colors

The `color` and `background` arguments in the `style_tt()` function are used for specifying the text color and the background color for cells of a table created by the `tt()` function. This argument plays a crucial role in enhancing the visual appeal and readability of the table, whether it's rendered in LaTeX or HTML format. The way we specify colors differs slightly between the two formats:

For HTML Output:

- Hex Codes: You can specify colors using hexadecimal codes, which consist of a `#` followed by 6 characters (e.g., `#CC79A7`). This allows for a wide range of colors.
- Keywords: There's also the option to use color keywords for convenience. The supported keywords are basic color names like `black`, `red`, `blue`, etc.

For LaTeX Output:

- Hexadecimal Codes: Similar to HTML, you can use hexadecimal codes. However, in LaTeX, you need to include these codes as strings (e.g., `"#CC79A7"`).
- Keywords: LaTeX supports a different set of color keywords, which include standard colors like `black`, `red`, `blue`, as well as additional ones like `cyan`, `darkgray`, `lightgray`, etc.
- Color Blending: An advanced feature in LaTeX is color blending, which can be achieved using the `xcolor` package. You can blend colors by specifying ratios (e.g., `white!80!blue` or `green!20!red`).
- Luminance Levels: [The `ninecolors` package in LaTeX](https://ctan.org/pkg/ninecolors?lang=en) offers colors with predefined luminance levels, allowing for more nuanced color choices (e.g., "azure4", "magenta8").

Note that the keywords used in LaTeX and HTML are slightly different.

```{r}
tt(x) |> style_tt(i = 1:4, j = 1, color = "#FF5733")
```

Note that when using Hex codes in a LaTeX table, we need extra declarations in the LaTeX preamble. See `?tt` for details.



## Spanning cells

Sometimes, it can be useful to make a cell stretch across multiple colums, for example when we want to insert a label. To achieve this, we can use the `colspan` argument. Here, we make the 2nd cell of the 2nd row stretch across three columns:

```{r}
tt(x)|> style_tt(
  i = 2, j = 2,
  colspan = 3,
  align = "c",
  color = "white",
  background = "black")
```

Here is the original table for comparison:

```{r}
tt(x)
```

## Headers

The header can be omitted from the table by deleting the column names in the `x` data frame:

```{r}
k <- x
colnames(k) <- NULL
tt(k)
```


# Groups and labels

```{r}
mtcars[1:12, 1:8] |>
  tt() |> 
  group_tt(i = c(
    "I like (fake) hamburgers" = 3,
    "She prefers halloumi" = 4,
    "They love tofu" = 7))
  ```



# HTML customization

::: {.content-visible when-format="pdf"}
The HTML customization options described in this section are not available for LaTeX (or PDF) documents. Please refer to the web documentation to read this part of the tutorial.
:::

## Themes

::: {.content-visible when-format="html"}
The Bootstrap framework provides a number of built-in themes to style tables. To use them, we call `bootstrapOptions()` with the `class` argument, and we specify the Bootstrap class. A list of available Bootstrap classes can be found here: <https://getbootstrap.com/docs/5.3/content/tables/>

For example, to produce a "dark" table, we use the `table-dark` class:

```{r, eval = knitr::is_html_output()}
tt(x, theme = "table table-dark")
```

We can also combine several Bootstrap classes. Here, we get a "striped" table with the "warning" color and hover feature:

```{r, eval = knitr::is_html_output()}
tt(x, theme = "table table-striped table-warning table-hover")
```

:::

## CSS declarations

::: {.content-visible when-format="html"}
The `style_tt()` function allows us to declare CSS properties and values for individual cells, columns, or rows of a table. For example, if we want to make the first column bold, we could do:

```{r}
tt(x) |>
  style_tt(j = 1, bootstrap_css = "font-weight: bold; color: red;")
```
:::

## CSS rules

::: {.content-visible when-format="html"}
For more extensive customization, we can use complete CSS rules. In this example, we define several rules that apply to a new class called `mytable`. Then, we use the `theme` argument of the `tt()` function to ensure that our tiny table is of class `mytable`. Finally, we call `style_bootstrap()` to apply the rules with the `bootstrap_css_rule` argument.

```{r, eval = knitr::is_html_output()}
css_rule <- "
.mytable {
  background: linear-gradient(45deg, #EA8D8D, #A890FE);
  width: 600px;
  border-collapse: collapse;
  overflow: hidden;
  box-shadow: 0 0 20px rgba(0,0,0,0.1);
}

.mytable th,
.mytable td {
  padding: 5px;
  background-color: rgba(255,255,255,0.2);
  color: #fff;
}

.mytable tbody tr:hover {
  background-color: rgba(255,255,255,0.3);
}

.mytable tbody td:hover:before {
  content: '';
  position: absolute;
  left: 0;
  right: 0;
  top: -9999px;
  bottom: -9999px;
  background-color: rgba(255,255,255,0.2);
  z-index: -1;
}
"

tt(x, theme = "table mytable") |> 
  style_tt(bootstrap_css_rule = css_rule)
```

:::



# LaTeX / PDF customization

::: {.content-visible when-format="html"}
The LaTeX / PDF customization options described in this section are not available for HTML documents. Please refer to the PDF documentation hosted on the website to read this part of the tutorial.
:::


## Introduction to `tabularray`

::: {.content-visible when-format="pdf"}
`tabularray` offers a robust solution for creating and managing tables in LaTeX, standing out for its flexibility and ease of use. It excels in handling complex table layouts and offers enhanced functionality compared to traditional LaTeX table environments. This package is particularly useful for users requiring advanced table features, such as complex cell formatting, color management, and versatile table structures.

A key feature of Tabularray is its separation of style from content. This approach allows users to define the look and feel of their tables (such as color, borders, and text alignment) independently from the actual data within the table. This separation simplifies the process of formatting tables and enhances the clarity and maintainability of LaTeX code. The `tabularray` documentation is fantastic. It will teach you how to customize virtually every aspect of your tables: <https://ctan.org/pkg/tabularray?lang=en>

Tabularray introduces a streamlined interface for specifying table settings. It employs two types of settings blocks: Inner and Outer. The Outer block is used for settings that apply to the entire table, like overall alignment, while the Inner block handles settings for specific elements like columns, rows, and cells. The `style_tt()` function includes `tabularray_inner` and `tabularray_outer` arguments to set these respective features.

Consider this `tabularray` example, which illustrates the use of inner settings:

```latex
\begin{table}
\centering
\begin{tblr}[         %% tabularray outer open
]                     %% tabularray outer close
{                     %% tabularray inner open
column{1-4}={halign=c},
hlines = {bg=white},
vlines = {bg=white},
cell{1,6}{odd} = {bg=teal7},
cell{1,6}{even} = {bg=green7},
cell{2,4}{1,4} = {bg=red7},
cell{3,5}{1,4} = {bg=purple7},
cell{2}{2} = {r=4,c=2}{bg=azure7},
}                     %% tabularray inner close
mpg & cyl & disp & hp \\
21 & 6 & 160 & 110 \\
21 & 6 & 160 & 110 \\
22.8 & 4 & 108 & 93 \\
21.4 & 6 & 258 & 110 \\
18.7 & 8 & 360 & 175 \\
\end{tblr}
\end{table}
```
   
The Inner block, enclosed in `{}`, defines specific styles like column formats (`column{1-4}={halign=c}`), horizontal and vertical line colors (`hlines={fg=white}`, `vlines={fg=white}`), and cell colorations (`cell{1,6}{odd}={bg=teal7}`, etc.). The last line of the inner block also species that the second cell of row 2 (`cell{2}{2}`) should span 4 rows and 2 columns (`{r=4,c=3}`), be centered (`halign=c`), and with a background color with the 7th luminance level of the azure color (`bg=azure7`).

We can create this code easily by passing a string to the `tabularray_inner` argument of the `style_tt()` function:

```{r, eval = knitr::is_latex_output()}
inner <- "
column{1-4}={halign=c},
hlines = {fg=white},
vlines = {fg=white},
cell{1,6}{odd} = {bg=teal7},
cell{1,6}{even} = {bg=green7},
cell{2,4}{1,4} = {bg=red7},
cell{3,5}{1,4} = {bg=purple7},
cell{2}{2} = {r=4,c=2}{bg=azure7},
"
mtcars[1:5, 1:4] |>
  tt(output = "latex", theme = "void") |>
  style_tt(tabularray_inner = inner)
```


:::


## `tabularray`  keys

::: {.content-visible when-format="pdf"}
Inner specifications:

| Key       | Description and Values                                    | Initial Value |
|-----------|-----------------------------------------------------------|---------------|
| `rulesep` | space between two hlines or vlines                        | `2pt`         |
| `stretch` | stretch ratio for struts added to cell text               | `1`           |
| `abovesep`| set vertical space above every row                        | `2pt`         |
| `belowsep`| set vertical space below every row                        | `2pt`         |
| `rowsep`  | set vertical space above and below every row              | `2pt`         |
| `leftsep` | set horizontal space to the left of every column          | `6pt`         |
| `rightsep`| set horizontal space to the right of every column         | `6pt`         |
| `colsep`  | set horizontal space to both sides of every column        | `6pt`         |
| `hspan`   | horizontal span algorithm: `default`, `even`, or `minimal`| `default`     |
| `vspan`   | vertical span algorithm: `default` or `even`              | `default`     |
| `baseline`| set the baseline of the table                             | `m`           |


Outer specifications:

| Key       | Description and Values                          | Initial Value |
|-----------|-------------------------------------------------|---------------|
| `baseline`| set the baseline of the table                   | `m`           |
| `long`    | change the table to a long table                | None          |
| `tall`    | change the table to a tall table                | None          |
| `expand`  | you need this key to use verb commands          | None          |

Cells:

| Key     | Description and Values                                                         | Initial Value |
|---------|---------------------------------------------------------------------------------|---------------|
| `halign`| horizontal alignment: `l` (left), `c` (center), `r` (right) or `j` (justify)   | `j`           |
| `valign`| vertical alignment: `t` (top), `m` (middle), `b` (bottom), `h` (head) or `f` (foot) | `t`       |
| `wd`    | width dimension                                                                | None          |
| `bg`    | background color name                                                          | None          |
| `fg`    | foreground color name                                                          | None          |
| `font`  | font commands                                                                  | None          |
| `mode`  | set cell mode: `math`, `imath`, `dmath` or `text`                              | None          |
| `cmd`   | execute command for the cell text                                              | None          |
| `preto` | prepend text to the cell                                                       | None          |
| `appto` | append text to the cell                                                        | None          |
| `r`     | number of rows the cell spans            | 1             |
| `c`     | number of columns the cell spans         | 1             |


Rows:


| Key        | Description and Values                                                              | Initial Value |
|------------|-------------------------------------------------------------------------------------|---------------|
| `halign`   | horizontal alignment: `l` (left), `c` (center), `r` (right) or `j` (justify)        | `j`           |
| `valign`   | vertical alignment: `t` (top), `m` (middle), `b` (bottom), `h` (head) or `f` (foot) | `t`       |
| `ht`       | height dimension                                                                    | None          |
| `bg`       | background color name                                                               | None          |
| `fg`       | foreground color name                                                               | None          |
| `font`     | font commands                                                                       | None          |
| `mode`     | set mode for row cells: `math`, `imath`, `dmath` or `text`                          | None          |
| `cmd`      | execute command for every cell text                                                 | None          |
| `abovesep` | set vertical space above the row                                                    | `2pt`         |
| `belowsep` | set vertical space below the row                                                    | `2pt`         |
| `rowsep`   | set vertical space above and below the row                                          | `2pt`         |
| `preto`    | prepend text to every cell (like `>` specifier in `rowspec`)                        | None          |
| `appto`    | append text to every cell (like `<` specifier in `rowspec`)                         | None          |


Columns:


| Key         | Description and Values                                                         | Initial Value |
|-------------|--------------------------------------------------------------------------------|---------------|
| `halign`    | horizontal alignment: `l` (left), `c` (center), `r` (right) or `j` (justify)  | `j`           |
| `valign`    | vertical alignment: `t` (top), `m` (middle), `b` (bottom), `h` (head) or `f` (foot) | `t`       |
| `wd`        | width dimension                                                                | None          |
| `co`        | coefficient for the extendable column (`X` column)                             | None          |
| `bg`        | background color name                                                          | None          |
| `fg`        | foreground color name                                                          | None          |
| `font`      | font commands                                                                  | None          |
| `mode`      | set mode for column cells: `math`, `imath`, `dmath` or `text`                  | None          |
| `cmd`       | execute command for every cell text                                            | None          |
| `leftsep`   | set horizontal space to the left of the column                                 | `6pt`         |
| `rightsep`  | set horizontal space to the right of the column                                | `6pt`         |
| `colsep`    | set horizontal space to both sides of the column                               | `6pt`         |
| `preto`     | prepend text to every cell (like `>` specifier in `colspec`)                   | None          |
| `appto`     | append text to every cell (like `<` specifier in `colspec`)                    | None          |


hlines:


| Key         | Description and Values                                         | Initial Value |
|-------------|-----------------------------------------------------------------|---------------|
| `dash`      | dash style: `solid`, `dashed` or `dotted`                      | `solid`       |
| `text`      | replace hline with text (like `!` specifier in `rowspec`)      | None          |
| `wd`        | rule width dimension                                           | `0.4pt`       |
| `fg`        | rule color name                                                | None          |
| `leftpos`   | crossing or trimming position at the left side                 | `1`           |
| `rightpos`  | crossing or trimming position at the right side                | `1`           |
| `endpos`    | adjust leftpos/rightpos for only the leftmost/rightmost column | `false`       |

vlines:


| Key        | Description and Values                                        | Initial Value |
|------------|---------------------------------------------------------------|---------------|
| `dash`     | dash style: `solid`, `dashed` or `dotted`                     | `solid`       |
| `text`     | replace vline with text (like `!` specifier in `colspec`)     | None          |
| `wd`       | rule width dimension                                          | `0.4pt`       |
| `fg`       | rule color name                                               | None          |
| `abovepos` | crossing or trimming position at the above side               | `0`           |
| `belowpos` | crossing or trimming position at the below side               | `0`           |

:::



---
title: "`tinytable` tutorial"
format:
  html: default
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
---

```{r, include=FALSE}
options("tt_bootstrapOptions_placement" = "H")
```

This tutorial is available in two versions:

* [PDF](tutorial.pdf)
* [HTML](tutorial.html)


# `tinytable` is easy to use

```{r}
# library(tinytable)
pkgload::load_all()

x <- mtcars[1:4, 1:5]

tt(x)
```

# Output formats

`tinytable` can produce tables in HTML, Markdown, or LaTeX (PDF) format. To choose, we use the `output` argument:

```{r}
#| eval: false
tt(x, output = "html")
tt(x, output = "latex")
tt(x, output = "markdown")
```

When calling `tinytable` from a Quarto or Rmarkdown document, `tinytable` detects the output format automatically and generates an HTML or LaTeX table as appropriate. This means that we do not need to explicitly specify the `output` format.


# Style

`tinytable` exports three styling functions:

1. `style_tt()`: LaTeX, PDF, and HTML 
  - A general interface to frequently used style choices which works for both HTML and LaTeX (PDF): colors, font style and size, row and column spans, etc.
2. `style_tabularray()`: LaTeX
  - A specialized interface which allows users to use the [extraordinarily powerful `tabularray` package](https://ctan.org/pkg/tabularray?lang=en) to customize LaTeX tables.
2. `style_bootstrap()`: HTML
  - A specialized interface which allows users to use the [powerful `Bootstrap` framework](https://getbootstrap.com/docs/5.3/content/tables/) to customize HTML tables.

These functions can be used to customize rows, columns, or individual cells. They control many features, including:

* Text color
* Background color
* Widths
* Heights
* Alignment
* Text Wrapping
* Column and Row Spacing
* Cell Merging
* Multi-row or column spans
* Border Styling
* Font Styling
* Header Customization

The `style_*()` functions can modify individual cells, or entire columns and rows. The portion of the table that is styled is determined by the `i` (rows)  and `j` (columns) arguments.


## Cells

To style individual cells, we use the `style_cell()`  function. The first two arguments (`i` and `j`) identify the positions of the cells of interest, by row and column numbers respectively. To style a cell in the 2nd row and 3rd column, we can do:

```{r}
pkgload::load_all()
tt(x, output = "html") |>
  style_tt(
    i = 2,
    j = 3,
    background = "black",
    color = "white",
    bold = TRUE,
    italic = TRUE)
```

The `i` and `j` accept vectors of integers to modify several cells at once:

```{r}
tt(x) |> style_tt(2, c(1, 3), background = "olive")
```

We can style all cells in a table by omitting the `i` and `j` arguments:


```{r}
tt(x) |> style_tt(background = "black", color = "white", bold = TRUE)
```

## Rows and columns

We can style entire rows by omitting the `j` argument, or style entire columns by omitting the `i` argument:

```{r}
tt(x) |> style_tt(i = 1:2, color = "blue")
```

```{r}
tt(x) |> style_tt(j = c(2, 4), bold = TRUE)
```

# Headers

The header can be omitted from the table by deleting the column names in the `x` data frame:

```{r}
k <- x
colnames(k) <- NULL
tt(k)
```


# Captions and cross-references

```{r}
tt(x, caption = "Data about cars.")
```

TODO: Cross-references


# HTML customization

::: {.content-visible when-format="pdf"}
_Warning:_ The HTML customization options described in this section are not available for LaTeX (or PDF) documents. Please refer to the web documentation to view this tutorial.
:::


::: {.content-visible when-format="html"}
## Themes

The Bootstrap framework provides a number of built-in themes to style tables. To use them, we call `bootstrapOptions()` with the `class` argument, and we specify the Bootstrap class. A list of available Bootstrap classes can be found here: <https://getbootstrap.com/docs/5.3/content/tables/>

For example, to produce a "dark" table, we use the `table-dark` class:

```{r, eval = knitr::is_html_output()}
tt(x, theme = "table table-dark")
```

We can also combine several Bootstrap classes. Here, we get a "striped" table with the "warning" color and hover feature:

```{r, eval = knitr::is_html_output()}
tt(x, theme = "table table-striped table-warning table-hover")
```

## CSS

For manual customization, we can also specify our own CSS class.



:::



# LaTeX / PDF customization

::: {.content-visible when-format="html"}
_Warning:_ The LaTeX / PDF customization options described in this section are not available for LaTeX (or PDF) documents. Please refer to the PDF documentation hosted on the website: Click on the tutorial web page and view the PDF link in the sidebar.
:::


::: {.content-visible when-format="pdf"}

```{r}
tt(x)
```


```{r, eval = knitr::is_latex_output()}
options(tt_latex_placement = "H")
inner <- "
 hlines = {white},
 vlines = {white},
 cell{1,6}{odd} = {teal7},
 cell{1,6}{even} = {green7},
 cell{2,4}{1,4} = {red7},
 cell{3,5}{1,4} = {purple7},
 cell{2}{2} = {r=4,c=2}{c,azure7},
"
mtcars[1:5, 1:4] |>
  tt(theme = "void") |>
  style_tabularray(inner = inner)
```

:::

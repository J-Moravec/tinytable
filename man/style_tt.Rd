% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/style_tt.R
\name{style_tt}
\alias{style_tt}
\title{Style a Tiny Table in either LaTeX or HTML format}
\usage{
style_tt(
  x,
  i,
  j,
  bold = FALSE,
  italic = FALSE,
  monospace = FALSE,
  color = NULL,
  background = NULL,
  fontsize = NULL,
  width = NULL,
  align = NULL,
  colspan = NULL,
  indent = 0,
  tabularray_inner = NULL,
  tabularray_outer = NULL,
  bootstrap_css = NULL,
  bootstrap_css_rule = NULL
)
}
\arguments{
\item{x}{A table object created by \code{tt()}. The function checks if it is a \code{tinytable_tabularray} or \code{tinytable_bootstrap} object.}

\item{i}{Row indices where the styling should be applied. Can be a single value or a vector. If \code{colspan} is used, \code{i} must be of length 1.}

\item{j}{Column indices where the styling should be applied. Can be a single value, a vector, or a Perl-style regular expression applied to column names of the original data frame. If \code{colspan} is used, \code{j} must be of length 1.}

\item{bold}{Logical; if \code{TRUE}, text is styled in bold.}

\item{italic}{Logical; if \code{TRUE}, text is styled in italic.}

\item{monospace}{Logical; if \code{TRUE}, text is styled in monospace font.}

\item{color}{Text color. There are several ways to specify colors, depending on the output format.
\itemize{
\item HTML:
\itemize{
\item Hex code composed of # and 6 characters, ex: #CC79A7.
\item Keywords: black, silver, gray, white, maroon, red, purple, fuchsia, green, lime, olive, yellow, navy, blue, teal, aqua
}
\item LaTeX:
\itemize{
\item Hex code composed of # and 6 characters, ex: "#CC79A7". See the section below for instructions to add in LaTeX preambles.
\item Keywords: black, blue, brown, cyan, darkgray, gray, green, lightgray, lime, magenta, olive, orange, pink, purple, red, teal, violet, white, yellow.
\item Color blending using xcolor\verb{, ex: }white!80!blue\verb{, }green!20!red`.
\item Color names with luminance levels from \href{https://mirror.quantum5.ca/CTAN/macros/latex/contrib/ninecolors/ninecolors.pdf}{the \code{ninecolors} package} (ex: "azure4", "magenta8", "teal2", "gray1", "olive3").
}
}}

\item{background}{Background color. Specified as a color name or hexadecimal code. Can be \code{NULL} for default color.}

\item{fontsize}{Integer Font size in pt units.}

\item{width}{Width of the cell or column. Can be \code{NULL} for default width.}

\item{align}{Text alignment within the cell. Options are 'c' (center), 'l' (left), or 'r' (right). Can be \code{NULL} for default alignment.}

\item{colspan}{Number of columns a cell should span. Can only be used if both \code{i} and \code{j} are of length 1. Must be an integer greater than 1.}

\item{indent}{Text indentation in em units. Positive values only.}

\item{tabularray_inner}{A string that specifies the "inner" settings of a tabularray LaTeX table.}

\item{tabularray_outer}{A string that specifies the "outer" settings of a tabularray LaTeX table.}

\item{bootstrap_css}{A vector of CSS style declarations to be applied (ex: \code{"font-weight: bold"}). Each element corresponds to a cell defined by \code{i} and \code{j}.}

\item{bootstrap_css_rule}{A string with complete CSS rules that apply to the table class specified using the \code{theme} argument of the \code{tt()} function.}
}
\value{
Returns a modified \code{tinytable} object with the applied styles.
}
\description{
This function applies styling to a table created by \code{tt()}. It allows customization of text style (bold, italic, monospace), text and background colors, font size, cell width, text alignment, column span, and indentation. The function supports both LaTeX (tabularray) and HTML (bootstrap) formats.
}
\section{LaTeX preamble}{


To be able to use all features of \code{tinytable} in PDF (LaTeX) documents, these commands need to be placed in your LaTeX preamble:

\if{html}{\out{<div class="sourceCode latex">}}\preformatted{\\usepackage\{float\}
\\usepackage\{codehigh\}
\\usepackage\{tabularray\}
\\UseTblrLibrary\{booktabs\}
\\NewTableCommand\{\\tinytableDefineColor\}[3]\{\\definecolor\{#1\}\{#2\}\{#3\}\}
}\if{html}{\out{</div>}}
}

